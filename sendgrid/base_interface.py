import python_http_client

region_host_dict = {'eu':'https://api.eu.sendgrid.com','global':'https://api.sendgrid.com'}

class BaseInterface(object):
    def __init__(self, auth, host, impersonate_subuser, region='global'):
        """
        Construct the Twilio SendGrid v3 API object.
        Note that the underlying client is being set up during initialization,
        therefore changing attributes in runtime will not affect HTTP client
        behaviour.

        :param auth: the authorization header
        :type auth: string
        :param impersonate_subuser: the subuser to impersonate. Will be passed
                                    by "On-Behalf-Of" header by underlying
                                    client. See
                                    https://sendgrid.com/docs/User_Guide/Settings/subusers.html
                                    for more details
        :type impersonate_subuser: string
        :param host: base URL for API calls
        :type host: string
        :param region: To determine the region which can only be 'global' or 'eu'
        :type region: string
        """
        from . import __version__
        self.auth = auth
        if host is not None and region == 'global':
            self.set_host(host)
        else:
            self.set_data_residency(region)
        self.impersonate_subuser = impersonate_subuser
        self.version = __version__
        self.useragent = 'sendgrid/{};python'.format(self.version)

        self.client = python_http_client.Client(
            host=self.host,
            request_headers=self._default_headers,
            version=3)

    @property
    def _default_headers(self):
        """Set the default header for a Twilio SendGrid v3 API call"""
        headers = {
            "Authorization": self.auth,
            "User-Agent": self.useragent,
            "Accept": 'application/json'
        }
        if self.impersonate_subuser:
            headers['On-Behalf-Of'] = self.impersonate_subuser

        return headers

    def reset_request_headers(self):
        self.client.request_headers = self._default_headers

    def send(self, message):
        """Make a Twilio SendGrid v3 API request with the request body generated by
           the Mail object

        :param message: The Twilio SendGrid v3 API request body generated by the Mail
                        object
        :type message: Mail
        """
        if not isinstance(message, dict):
            message = message.get()

        return self.client.mail.send.post(request_body=message)

    def set_host(self,host):
        self.host = host

    def set_data_residency(self,region):
        """
        * Client libraries contain setters for specifying region/edge.
        * This allows support global and eu regions only. This set will likely expand in the future.
        * Global should be the default
        * Global region means the message should be sent through:
        * HTTP: api.sendgrid.com
        * EU region means the message should be sent through:
        * HTTP: api.eu.sendgrid.com
        :param region:
        :return:
        """
        if region in region_host_dict.keys():
            self.host = region_host_dict[region]
        else:
            raise ValueError("region can only be \"eu\" or \"global\"")
