"""
  This code was generated by
 
  SENDGRID-OAI-GENERATOR
 
  Twilio SendGrid Mail API
  The Twilio SendGrid v3 Mail API allows you to send email at scale over HTTP. The Mail Send endpoint supports many levels of functionality, allowing you to send templates, set categories and custom arguments that can be used to analyze your send, and configure which tracking settings to include such as opens and clicks. You can also group mail sends into batches, allowing you to schedule and cancel sends by their batch IDs.
 
  NOTE: This class is auto generated by OpenAPI Generator.
  https://openapi-generator.tech
  Do not edit the class manually.
"""

import json
import warnings
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from sendgrid.base import values
from sendgrid.exceptions import ApiException
from sendgrid.http.request import Request
from sendgrid.http.response import ApiResponse

from pydantic import Field
from typing import Optional
from typing_extensions import Annotated
from sendgrid.rest.api.mail.v3.models.content_encoding import ContentEncoding
from sendgrid.rest.api.mail.v3.models.send_mail_request import SendMailRequest

class SendMail:
    def __init__(self, client) -> None:
        self.client = client
    
    def send(
        self,
            content_encoding: Optional[ContentEncoding] = None,
    send_mail_request: Optional[SendMailRequest] = None,

    ):
        path='/v3/mail/send'

        headers = values.of(
        {
            'Content-Encoding': content_encoding,
        })
        headers["Content-Type"] = "application/json"
        data = None
        if send_mail_request:
            data = send_mail_request.to_dict()
        request = Request(
            method='POST',
            url=path,
            data=data,
            headers=headers
        )
        response=self.client.send(request)
        if response is None:
            raise ApiException(error="CreateAlert creation failed: Unable to connect to server")

        if response.text:
            text = json.loads(response.text)
        else:
            text = ""
        if response.is_success():
            return ApiResponse(status_code=response.status_code, model=text, headers=response.headers)
        else:
            raise ApiException(status_code=response.status_code, error=text, headers=response.headers)
